[market_parameters]
market = market_x
#variation_flag = Y
config_variation = market_x_config_digital
data_variation = market_x_seg_traditional
targetting_mode = traditional

[module_names]
allocation = Y
cost = Y
customer_impact = Y
fraud = Y
redemption = Y
uplift = Y

[path_parameters]
sas_data_file = appuser_20171029.csv

[database_parameters]
adm_schema = market_x_easl
analysis_schema = market_x_comms_easl
segmentation_schema = market_x_segmentations
output_db = market_x_comms_easl

output_prefix = kpi_engine
output_suffix = v2
final_table_name = final
write_mode = overwrite
flush_module_tables = N

table1 = table1_traditional
table2 = table2_traditional
table3 = table3_traditional
offer_prod_redeem_mft = offer_prod_redeem_mft_traditional
event_dim = event_dim_c_traditional
offer_dim = offer_dim_c_traditional
card_dim = card_dim_c
card_loyalty_seg = card_loyalty_seg_h
card_lifestyle_seg = card_lifestyle_seg_h
card_pricesense_seg = card_pricesense_seg_h
transaction_item_mft = transaction_item_mft
transaction_basket_mft = transaction_basket_mft
prod_dim = prod_dim_h
identity_type_code = pid

[formats]
event_date_format = yyyyMMdd
calendar_date_format = yyyy-MM-dd
transaction_date_format = yyyy-MM-dd

prod_redeem_date_format = yyyyMMdakHmmss
transaction_date_time_format = yyyy-MM-dd HH:mm:ss.SSSSS

[event_paramenters]
event_code = 201749_013
event_start = 201748
event_end = 201801
pre_start = 201740
pre_end = 201747
post_start = 201802
post_end = 201809
seg_week = 201742
# used to calculate age
# targ_date = 2017-11-26

event_weeks = 6
pre_weeks = 8
post_weeks = 8

[allocation]
list = [('groupings_1_t','measures_2')]

groupings_1_t = ['()', '(prod_hier_l20_code, supplier_name)', '(slot_segment, pricesense_code, loyalty_level)', '(slot_segment, age, lifestyle_level)']
groupings_1_u = ['()','(pricesense_code, lifestyle_level, loyalty_level, channel_code)']
groupings_1 = ['()', '(channel_code, loyalty_level)', '(slot_segment, loyalty_level)', '(supplier_name, loyalty_level)', '(offer_code, loyalty_level)']
groupings_1_1 = ['()','(slot_segment, pricesense_code, lifestyle_level, loyalty_level, age, channel_code, supplier_name)']
groupings_1_to_run = ['()','(slot_segment, pricesense_code, lifestyle_level, loyalty_level, age, channel_code, supplier_name)','(fis_year_id,fis_week_id)','(offer_code)']
groupings_1_in_discussion = ['()','(slot_segment, pricesense_code, lifestyle_level, loyalty_level, age, channel_code, supplier, supplier_private_label, category, banner)','(offer_code, offer_desc)']
groupings_2 = ['(pricesense_code)','(pid,loyalty_level)','(pid,loyalty_level)']

measures_1 = ['household_allocated', 'mailed_households', 'coupons_exposed']
measures_2 = ['coupon_value_per_customer', 'active_customers', 'active_customers_percentage', 'active_loyal_customer', 'coupon_value', 'coupons_allocated', 'coupons_exposed', 'exposed_households', 'mailed_households', 'household_allocated', 'market_kpi1']

[cost]
list=[('groupings_1_t','measures_1')]

groupings_1_t = ['()', '(prod_hier_l20_code, supplier_name)', '(slot_segment, pricesense_code, loyalty_level)', '(slot_segment, age, lifestyle_level)']
groupings_1= ['()', '(channel_code, loyalty_level)', '(slot_segment, loyalty_level)', '(supplier_name, loyalty_level)', '(offer_code, loyalty_level)']
groupings_2 = ['()','(slot_segment, pricesense_code, lifestyle_level, loyalty_level, age, channel_code, supplier_name)','(fis_year_id,fis_week_id)','(offer_code)']
groupings_3 = ['(slot_segment, loyalty_level)']
groupings_4 = ['(slot_segment,lifestyle_level)']

measures_1 = ['redemption_cost', 'targeting_cost', 'production_cost', 'campaign_cost']
measures_2 = ['campaign_cost','redemption_cost','market_kpi1']

[fraud]
list = [('groupings_1','measures_2')]

groupings_1 = ['()', '(pricesense_code, loyalty_level)', '(age, lifestyle_level)']
groupings_2 = ['(slot_segment, pricesense_code)','(slot_segment, loyalty_level)','(slot_segment, lifestyle_level)']
groupings_3 = ['(slot_segment, loyalty_level)','(channel_code)']
groupings_4 = ['(slot_segment, lifestyle_level)','channel_code']

measures_1 = ['mis_redemptions']
measures_2 = ['bad_redeemers', 'control_redeemers', 'non_cc_malredemptions', 'control_participation', 'mis_redemptions', 'app_multi_redeemers', 'dm_multi_redeemers', 'app_dm_multi_redeemers', 'mal_redemptions']
measures_3 = ['mal_redemptions','non_cc_malredemptions','control_redeemers','bad_redeemers','mis_redemptions']

[redemption]
list = [('groupings_1_t','measures_2')]

groupings_1_t = ['()', '(pricesense_code, loyalty_level)', '(age, lifestyle_level)']
groupings_1 = ['()','(slot_segment, pricesense_code, lifestyle_level, loyalty_level, age, channel_code, supplier_name)','(fis_year_id,fis_week_id)','(offer_code)']
groupings_2 = ['(slot_segment, pricesense_code)','(slot_segment, loyalty_level)','(slot_segment, lifestyle_level)']
groupings_3 = ['(slot_segment, loyalty_level)']
groupings_4 = ['()']

measures_1 = ['mailed_participation','customer_participation','redemption_rate','response_rate','correct_redemeers','valid_redemption','paper_redemeers','digital_redemeers','paper_trigered','digital_trigered','number_of_redemptions','hh_redemeers','coupon_redeem_per_hh','index_vs_mailed']
measures_2=['hh_redemeers', 'number_of_redemptions', 'correct_redemeers', 'valid_redemption', 'paper_redemeers', 'digital_redemeers', 'paper_trigered', 'digital_trigered', 'mailed_penetration', 'overall_penetration', 'mailed_participation', 'redemption_rate', 'response_rate', 'coupon_redeem_per_hh', 'index_vs_mailed']

[customer_impact]
list = [('groupings_1','measures_2')]

groupings_1 = ['()', '(pricesense_code, loyalty_level)', '(age, lifestyle_level)']
groupings_2 = ['(slot_segment)', '(loyalty_level)', '(slot_segment, loyalty_level)', '(buy_in_category_but_not_product)']
measures_1 = ['average_basket_with_offer']
measures_2 = ['trialist','repeaters','adopters','pre_average_frequency_of_purchase','dur_average_frequency_of_purchase','post_average_frequency_of_purchase','lapsed_buyers','retained_hhs','average_basket_with_offer']

[uplift]
# Set property in file `~/.config/matplotlib/matplotlibrc` -> "backend : PDF"
# Default resampling is skipped in case external_sampling is set to 'Y' 
#parquet file path or resmampling method- systematic or one to one
external_resampling = Y
# Required in case of external resampling - hdfs location 
resamp_file = gs://market-x-analystplatform-analyst/mount3/LCM_Evaluation/{2017_wk49}/LCM/LCM_evaluation/rs_output.parquet
# This can be 'sys_resamp' or 'one_to_one'
resamp_type = sys_resamp
# Clustering will 
clustering = N

#item level/product level or basket_level 
uplift_level = basket
reporting_level = overall
uplift_method = ancova
# ratio or ancova
# ancova = strata
#- cluster - value(lit(1))

list=[('groupings_1','measures_1')]

groupings_1 = ['()']
measures_1 = ['units_uplift', 'sales_uplift', 'visits_uplift']